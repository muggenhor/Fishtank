#ifndef TEST_APP_UTILS_H
#define TEST_APP_UTILS_H

#define THROW_ON_ERROR(x) \
{ \
    smReturnCode result = (x); \
    if (result < 0) \
    { \
        std::stringstream s; \
        s << "API error code: " << result; \
        throw std::runtime_error(s.str()); \
    } \
}

float rad2deg(float rad)
{
	return rad*57.2957795f;
}

// Handles messages generated by API routines
void STDCALL receiveLogMessage(void *, const char *buf, int /*buf_len*/)
{
    std::cerr << std::string(buf);
}

bool processKeyPress(smEngineHandle engine, HWND video_display)
{
    if (!_kbhit())
    {
        return true;
    }
    int key = _getch();
    switch (key)
    {
    case 'r':
        {
            // Manually restart the tracking
            THROW_ON_ERROR(smEngineStart(engine));
        }
        return true;
    case 'a':
        {
            // Toggle auto-restart mode
            int on;
            THROW_ON_ERROR(smHTGetAutoRestartMode(engine,&on));
            THROW_ON_ERROR(smHTSetAutoRestartMode(engine,!on));
        }
        return true;
    case 'm':
        {
            // Move the video window to the right by 10 pixels
            RECT win_rect;
            if (GetWindowRect(video_display,&win_rect))
            {
                int width = win_rect.right - win_rect.left;
                int height = win_rect.bottom - win_rect.top;
                MoveWindow(video_display, win_rect.left+10, win_rect.top, width, height, true);
            }
        }
        return true;
    case 's':
        {
            // Make the video window a bit larger
            RECT win_rect;
            if (GetWindowRect(video_display,&win_rect))
            {
                int width = win_rect.right - win_rect.left;
                int height = win_rect.bottom - win_rect.top;
                MoveWindow(video_display, win_rect.left, win_rect.top, width+32, height+24, true);
            }
        }
        return true;
    case 'h':
        {
            // Toggle the visibility of the video window
            static bool hide = true;
            ShowWindow(video_display,hide?SW_HIDE:SW_SHOWNA);
            hide = !hide;
        }
        return true;
    default:
        return false;
    }
}

#endif
